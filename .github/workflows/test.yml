name: Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  download:
    outputs:
      md5: ${{ steps.checksum.outputs.md5 }}
      url: ${{ steps.checksum.outputs.url }}
    runs-on: ubuntu-latest
    steps:
    - run: curl -LO "https://sourceforge.net/projects/traceroute/best_release.json" 
    - name: Get checksum
      id: checksum
      run: |
        jq -r '"md5="+.release.md5sum' < best_release.json >> $GITHUB_OUTPUT
        jq -r '"url="+.release.url' < best_release.json >> $GITHUB_OUTPUT

    - name: Cache packages
      uses: actions/cache@v3
      with:
        path: traceroute.tgz
        key: tarball.${{ steps.checksum.outputs.md5 }}
    
    - name: Checksum and download
      run: |
        md5sum -c <(echo ${{ steps.checksum.outputs.md5 }} traceroute.tgz) || curl -L -o traceroute.tgz ${{ steps.checksum.outputs.url }}
        md5sum -c <(echo ${{ steps.checksum.outputs.md5 }} traceroute.tgz)

  build:
    needs: download
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Network info
      run: ip a && dpkg -l systemd 
    - name: Install deps
      run: "sudo sed -i 's/^# deb-src/deb-src/' /etc/apt/sources.list && sudo apt-get update && sudo apt-get build-dep traceroute && sudo apt-get install haproxy"
    - name: Cache packages
      uses: actions/cache/restore@v3
      with:
        path: traceroute.tgz
        key: tarball.${{ needs.download.outputs.md5 }}
        fail-on-cache-miss: true
    - name: Get it
      run: md5sum -c <(echo ${{ needs.download.outputs.md5 }} traceroute.tgz) && mkdir tr && tar -C tr --strip-components 1 -zxv -f traceroute.tgz
    - name: Build it
      run: cd tr && make
    - name: Unit test it
      run: make
    - name: Test it maybe
      run: sudo PATH=tr/traceroute/:${PATH} bash test.sh

  package:
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    needs: [download, build]

    steps:
    - uses: actions/checkout@v3
    - name: Cache packages
      uses: actions/cache/restore@v3
      with:
        path: traceroute.tgz
        key: tarball.${{ needs.download.outputs.md5 }}
        fail-on-cache-miss: true
    - name: Get it
      run: md5sum -c <(echo ${{ needs.download.outputs.md5 }} traceroute.tgz)

    # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
    - name: Log in to the Container registry
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
    # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
    # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
    - name: Build and push Docker image
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        file: Containerfile

   
